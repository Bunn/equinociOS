---
layout:     post
title:      "Backend usando Swift ? Sim, √© poss√≠vel!"
subtitle:   "Entenda um pouco sobre o projeto open source que vai te ajudar a ver o desenvolvimento de software para servidores de outra forma usando Swift!"
date:       2016-03-20 00:00:00
author:     "Thiago Holanda"
header-img: "img/tholanda/milky-way-graceful-arc.jpg"
category:   open-source
---

> Thiago Holanda ([@tholanda](https://twitter.com/tholanda){:target="_blank"}), desenvolvedor de software h√° um bocado de tempo, j√° trabalhou em tudo que foi tipo de projeto. Come√ßou no backend, se meteu a besta com banco de dados, iniciou no iOS, se embrenhou pelo client side, voltou pro iOS e agora voltou a namorar o backend, ufa... Marido da Carolina, pai de duas trombadinhas felinas e quando tem um tempinho d√° uns rol√©s de skate por a√≠, que √© a terceira maior paix√£o, depois da Carolina e da programa√ß√£o!
<br>

### Um pequeno overview

Recentemente, enquanto preparava uma apresenta√ß√£o sobre *"Swift no Backend"* para o encontro de desenvolvedores de uma grande empresa, conversei com alguns amigos no [Slack](https://iosdevbr.herokuapp.com), nos corredores da empresa e percebi que nos dias de hoje temos excelentes desenvolvedores m√≥veis, que por muitas vezes n√£o conhecem outras tecnologias, sen√£o *iOS* ou *Android*.

Pessoas que acompanharam a populariza√ß√£o dessas novas tecnologias atrav√©s da Apple e do Google, investiram tempo e dinheiro nesse segmento, e deixaram de lado o restante das engrenagens que fazem esse grande rel√≥gio chamado [World Wide Web](https://en.wikipedia.org/wiki/World_Wide_Web){:target="_blank"} funcionar.

Eu mesmo, durante alguns anos, deixei o backend de lado e esquecido acreditando que parte de um novo futuro estava nas m√£os de empresas que estavam surgindo sob uma nova sigla: [BaaS](https://en.wikipedia.org/wiki/Mobile_backend_as_a_service){:target="_blank"} *(Backend as a Service)* . Achei que o *[Parse](https://www.parse.com){:target="_blank"}* era a grande solu√ß√£o, quase uma bala de prata. Desenvolvi alguns sistemas usando a ferramenta e n√£o posso dizer que me arrependi.

Depois de um tempo trilhando esse caminho, comecei a perceber qu√£o intrusivo era o [Parse](https://www.parse.com){:target="_blank"}. Queria me livrar das garras dele e ent√£o renasceu a id√©ia de me dedicar mais ao backend e buscar alternativas de c√≥digo aberto, que fosse semelhante ao que o [Parse](https://www.parse.com){:target="_blank"} poderia me oferecer. Nessa busca, tinha em mente algumas coisas: 1) open source, 2) [Swift](https://www.swift.org){:target="_blank"}, 3) backend, e √© claro, iniciar o pr√≥ximo projeto em [Swift](https://www.swift.org){:target="_blank"}. 

Por falta de tempo ou vontade de sair da zona de conforto, esse projeto em [Swift](https://www.swift.org){:target="_blank"} n√£o foi iniciado. Finalmente, no in√≠cio de Dezembro de 2015, a *Apple* libera o c√≥digo fonte do *[Swift](https://www.swift.org){:target="_blank"}*, o que foi √≥timo. Em Janeiro, conversando com o [Ricardo Borelli](https://twitter.com/rabc){:target="_blank"}, percebemos que havia uma vontade m√∫tua de aprender o *[Swift](https://www.swift.org){:target="_blank"}*, mas n√£o para trabalhar no *iOS*. Quer√≠amos aprender a linguagem de programa√ß√£o, n√£o o *Framework*. A pergunta nesse momento, era: "Como?".

As formas que t√≠nhamos para iniciar nosso aprendizado no *[Swift](https://www.swift.org){:target="_blank"}* eram: 

- Desenvolvendo uma aplica√ß√£o iOS (fora do nosso objetivo inicial)
- Contribuir com projeto open source escrito em *[Swift](https://www.swift.org){:target="_blank"}*

Por termos trabalhado alguns anos como desenvolvedores Backend, a segunda op√ß√£o era mais atraente, ent√£o iniciamos as buscas por projetos open source que nos permitissem desenvolver *web applications* usando *[Swift](https://www.swift.org){:target="_blank"}*.

Primeiro chegamos ao [CocoaPods App](https://github.com/CocoaPods/CocoaPods-app){:target="_blank"}. Desencantamos, pois era um projeto com diversas classes escritas em *Objective-C*. Em seguida, encontramos o [Perfect](http://www.perfect.org/){:target="_blank"}, o [Vapor](https://github.com/qutheory/vapor){:target="_blank"}, e ent√£o o [Ricardo](https://twitter.com/rabc){:target="_blank"} encontrou o [Zewo](http://zewo.io){:target="_blank"}. A partir da√≠ come√ßou de fato o envolvimento com um projeto 100% open source para servidor, onde aprender√≠amos [Swift](https://www.swift.org){:target="_blank"}.

<br>

### O que √© o Zewo?

O *[Zewo](http://zewo.io){:target="_blank"}* √© um conjunto de bibliotecas voltadas para o desenvolvimento de software para servidores. Diversas bibliotecas do *[Zewo](http://zewo.io){:target="_blank"}* s√£o nada mais do que wrappers de classes, que foram escritas em *[C](https://en.wikipedia.org/wiki/C_(programming_language)){:target="_blank"}*.

<br>

### A Hist√≥ria do Zewo

O *[Zewo](http://zewo.io){:target="_blank"}* nasceu em torno de Junho de 2015, na √©poca em que a *Apple* anunciou que abriria o c√≥digo fonte do *[Swift](https://www.swift.org){:target="_blank"}*. O primeiro nome dele foi *[SwiftHTTPServer](https://github.com/paulofaria/SwiftHTTPServer){:target="_blank"}* e foi constru√≠do pelo *[Paulo Faria](https://twitter.com/paulofaria){:target="_blank"}* - um dev brasileiro - que manteve a constru√ß√£o do *[SwiftHTTPServer](https://github.com/paulofaria/SwiftHTTPServer){:target="_blank"}* em constante crescimento, at√© pouco antes da *Apple* finalmente liberar o c√≥digo fonte do *[Swift](https://www.swift.org){:target="_blank"}*, quando ele decidiu reiniciar tudo. E ent√£o surgiu o *[Zewo](http://zewo.io){:target="_blank"}* com uma proposta diferente: "n√£o ser apenas um web framework, mas uma plataforma de desenvolvimento para tudo que fosse relacionado a servidor". E tudo isso gra√ßas ao fato de compilar para Linux. 

<br>

### Se √© uma plataforma para servidores, me d√° uns exemplos do que eu posso fazer com o Zewo.

Voc√™ pode trabalhar com praticamente tudo que voc√™ quiser no servidor. 
Alguns poucos exemplos:

- Crawlers
- Loggers
- Renders 
- Database (MySQL e Postgres)
- Scripts
- Web Applications 
- Conex√µes remotas usando TCP/UDP

E o mais interessante: sem precisar da [Foundation](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/ObjC_classic/){:target="_blank"}, que ainda n√£o possui o c√≥digo fonte liberado.

<br>

### Zewo + Swift X

Desde o in√≠cio, modulariza√ß√£o foi um dos focos principais do [Zewo](http://zewo.io){:target="_blank"}. Isso faz com que a reutiliza√ß√£o de c√≥digo ocorra de forma muito mais f√°cil. Quando Vapor (um dos frameworks web para swift) resolveu se integrar aos m√≥dulos do Zewo, surgiu a id√©ia de criar um padr√£o para compartilhamento de c√≥digo entre projetos Swift. Nasceu ent√£o o [Swift X](https://github.com/swiftx/docs){:target="_blank"} (Swift Cross Project Standards). O [Swift X](https://github.com/swiftx/docs){:target="_blank"} √© uma cole√ß√£o de protocolos e tipos b√°sicos, passando por dados bin√°rios, requisi√ß√µes e respostas *HTTP*, *URIs*, at√© alcan√ßar um padr√£o para servidores e clientes *HTTP*, roteadores *HTTP*, *middlewares*, etc.

O *[Swift X](https://github.com/swiftx/docs){:target="_blank"}* ainda √© bem novo, mas j√° tem alguns frameworks iniciando o suporte a seus padr√µes. A pr√≥xima vers√£o do *[Zewo](http://zewo.io){:target="_blank"}* j√° vai fazer uso do *SX*, facilitando ainda mais o compartilhamento de c√≥digo e integra√ß√£o entre a comunidade *[Swift](https://www.swift.org){:target="_blank"}*.

<br>

### Vamos come√ßar?

Voc√™ precisa de algumas ferramentas. *V√¢mo* l√°, receita de bolo üòú:

- [Homebrew](http://brew.sh)
- Um editor de texto 
    - [CodeRunner](https://coderunnerapp.com){:target="_blank"}
    - [Sublime Text](https://www.sublimetext.com/){:target="_blank"}
    - [Atom](https://atom.io){:target="_blank"}
    - [TextMate](https://macromates.com/){:target="_blank"}
    - Voc√™ n√£o manda em mim, vou usar o TextEdit üòÇ

Depois de instalado, ser√° necess√°rio adicionar a f√≥rmula do *[Zewo](http://zewo.io){:target="_blank"}* para o [Homebrew](http://brew.sh). No *terminal*, digite o seguinte comando

```sh
$ brew tap zewo/tap
$ brew install zewo
```
<br>

### Toolchain

Para iniciar os trabalhos de forma simples, usando o *Mac OS X*, precisaremos do *toolchain* do *[Swift](https://www.swift.org){:target="_blank"}*.

> Se voc√™ j√° tem tudo isso instalado, v√° direto para _[Criando o Hello World](#criando-um-hello-world)_

Fa√ßa o download do toolchain de 08 de Fevereiro em *[https://swift.org/download/#apple-platforms](https://swift.org/download/#apple-platforms){:target="_blank"}*

![Swift Download Page]({{ site.baseurl }}/img/tholanda/swift-download-page.png)

Finalizado o download, execute o `swift-DEVELOPMENT-SNAPSHOT-2016-02-08-a-osx.pkg`

Ser√° necess√°rio que voc√™ adicione √† sua vari√°vel de ambiente, o path do toolchain que foi instalado.

Abra o *terminal* e digite o seguinte comando

```sh
$ open ~/.bash_profile
```

Adicione o path padr√£o de instala√ß√£o do *[Swift](https://www.swift.org){:target="_blank"}* (caso voc√™ n√£o tenha alterado o diret√≥rio de instala√ß√£o)

```sh
/Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin
```

O resultado final da vari√°vel de ambiente *PATH* dever√° ser algo semelhante ao screenshot. Salve a modifica√ß√£o no *.bash_profile*.

![]({{ site.baseurl }}/img/tholanda/environment-variable-path-textedit.png)

Feito isso, ser√° necess√°rio executar o *.bash_profile*, usando o comando abaixo

```sh
$ source ~/.bash_profile
```
<br>

### Criando um Hello World

Vamos voltar ao *terminal*

```sh
$ cd ~/
$ mkdir hello-world
$ cd hello-world
$ swift-build --init
Creating Package.swift
Creating .gitignore
Creating Sources/
Creating Sources/main.swift
Creating Tests/
```

Com um editor de texto, edite o arquivo *Package.swift* e adicione os reposit√≥rios [HTTPServer](https://github.com/Zewo/HTTPServer){:target="_blank"}, [Router](https://github.com/Zewo/Router){:target="_blank"} e [LogMiddleware](https://github.com/Zewo/LogMiddleware){:target="_blank"} √† nossa lista de depend√™ncias


*Package.swift* 

```swift
import PackageDescription

let package = Package(
    name: "hello-world",
    dependencies: [
        .Package(url: "https://github.com/Zewo/HTTPServer.git", majorVersion: 0, minor: 3),
        .Package(url: "https://github.com/Zewo/Router.git", majorVersion: 0, minor: 3),
        .Package(url: "https://github.com/Zewo/LogMiddleware.git", majorVersion: 0, minor: 3)
    ]
)
```

*Sources/main.swift*

```swift
import HTTPServer
import Router
import LogMiddleware

let log = Log()
let logMiddleware = LogMiddleware(log: log)

let router = Router(middleware: logMiddleware) { route in
    route.get("/") { request in
        return Response(body: "Hello World!")
    }
}

try Server(port: 8080, responder: router).start()
```

Ap√≥s implementar essas ~~milhares~~ poucas linhas de c√≥digo volte ao *terminal*, no diret√≥rio do projeto, e execute o compilador do *[Swift](https://www.swift.org){:target="_blank"}*

```sh
$ swift-build
```

Na primeira vez que voc√™ executar o `swift-build` no diret√≥rio do seu projeto, o *[Swift Package Manager](https://github.com/apple/swift-package-manager){:target="_blank"}* far√° o clone dos projetos que adicionamos na chave `dependencies`, no `Package.swift` e suas subdepend√™ncias, em seguida os sources ser√£o compilados. Por fim, o resultado ser√° um execut√°vel gerado pelo compilador

```sh
$ swift-build
Compiling Swift Module 'helloworld' (1 sources)
Linking Executable:  .build/debug/hello-world
```

Agora que o compilador disse pra gente o que compilou e onde gerou o execut√°vel, fica f√°cil saber o que executar. 

Assumindo que voc√™ est√° no diret√≥rio `hello-world`, digite o seguinte no *terminal*

```sh
$ .build/debug/hello-world



                             _____
     ,.-``-._.-``-.,        /__  /  ___ _      ______
    |`-._,.-`-.,_.-`|         / /  / _ \ | /| / / __ \
    |   |ÀÜ-. .-`|   |        / /__/  __/ |/ |/ / /_/ /
    `-.,|   |   |,.-`       /____/\___/|__/|__/\____/ (c)
        `-.,|,.-`           -----------------------------

================================================================================
Started HTTP server, listening on port 8080.
```

Agora que temos o nosso servidor rodando devidamente no *terminal*, abra o browser e digite a seguinte URL: `http://127.0.0.1:8080` e voc√™ ver√° algo como o screeshot abaixo

![]({{ site.baseurl }}/img/tholanda/hello-world-running-on-browser.png)

Por ter configurado  o [LogMiddleware](https://github.com/Zewo/LogMiddleware){:target="_blank"} no `Package.swift`, as requisi√ß√µes disparadas contra o servidor ser√£o mostradas no console.

> Em diversos web frameworks, mostrar os detalhes da requisi√ß√£o no console √© parte da configura√ß√£o padr√£o. Como no *[Zewo](http://zewo.io){:target="_blank"}* separamos todos os m√≥dulos, deixamos essa configura√ß√£o como op√ß√£o para o usu√°rio. No *Hello World* n√£o estamos persistindo esses dados, mas caso seja interessante, voc√™ pode usar o [File](https://github.com/Zewo/File){:target="_blank"} para guard√°-los em um arquivo.

![]({{ site.baseurl }}/img/tholanda/hello-world-showing-log-on-console.png)

Enfim, depois de tanta explica√ß√£o, esse √© o nosso *Hello World* usando *[Swift](https://www.swift.org){:target="_blank"}* e *[Zewo](http://zewo.io){:target="_blank"}*. 
Por que n√£o incrementar um pouco mais esse exemplo ? Fique tranquilo que a partir de agora n√£o serei t√£o detalhista! ~~ser√°?~~ üòå

<br>

### Criando um render html

Legal, bacana, temos o *Hello World* funcionando. Mas se estamos falando sobre montar uma *web application*, ent√£o √© necess√°rio renderizar um *HTML* com informa√ß√µes vindas do sevidor, n√£o √© mesmo ? Por isso, vamos usar o [Sideburns](https://github.com/Zewo/Sideburns){:target="_blank"} *- uma pequena camada sobre o [Mustache](https://github.com/Zewo/Mustache){:target="_blank"} que √© um fork do [GRMustache](https://github.com/groue/GRMustache.swift){:target="_blank"} -* e o [HTTPFile](https://github.com/Zewo/HTTPFile){:target="_blank"} que √© a implementa√ß√£o do protocolo *ResponderType* e ser√° usado para expor o conte√∫do da pasta `public`. 

Ao adicionar o [Sideburns](https://github.com/Zewo/Sideburns){:target="_blank"} √† lista de `dependencies`, o`Package.swift` dever√° ficar assim

```swift
import PackageDescription

let package = Package(
    name: "hello-world",
    dependencies: [
        .Package(url: "https://github.com/Zewo/HTTPServer.git", majorVersion: 0, minor: 3),
        .Package(url: "https://github.com/Zewo/Router.git", majorVersion: 0, minor: 3),
        .Package(url: "https://github.com/Zewo/LogMiddleware.git", majorVersion: 0, minor: 3),
        .Package(url: "https://github.com/Zewo/HTTPFile.git", majorVersion: 0, minor: 3),
        .Package(url: "https://github.com/Zewo/Sideburns.git", majorVersion: 0, minor: 2)
    ]
)
```

Show! Logo ap√≥s adicionar os novos pacotes, o ideal seria voltar ao *terminal* e rodar o `swift-build`, mas podemos esperar um pouquinho mais e fazer tudo de uma vez.
Mas se paci√™ncia n√£o for muito seu forte, manda ver! Mal n√£o vai fazer! üòú

Na raiz do seu projeto vamos criar uma pasta chamada `public` e vamos adicionar alguns arquivos simples. No *terminal* digite

```sh
$ mkdir -p public/assets
```

crie um arquivo `main.css` dentro da pasta `assets`

```sh
$ touch public/assets/main.css
```

edite o `main.css` e vamos adicionar uma simples propriedade, apenas para que a nossa p√°gina n√£o fique completamente sem estilo

```css
body {
    font-family: "verdana";
    font-size: 10px;
}
```
crie na raiz da pasta `public` um arquivo chamado `hello.html`

```sh
$ touch public/hello.html
```

edite o `hello.html` e adicione o seguinte bloco ao arquivo

> caso voc√™ tenha d√∫vidas sobre a forma de trabalhar com o *Mustache*, acesse a documenta√ß√£o da ferramenta no link [https://github.com/groue/GRMustache](https://github.com/groue/GRMustache){:target="_blank"}.

```html
{% raw %}<html>
    <head>
        <title>{{ title }}</title>
        <meta charset="UTF-8">
        <link rel="stylesheet" type="text/css" href="/assets/main.css">
    </head>
    <body>
        <div>
            <h1>
            {{ description }}
            </h1>
            <ul>
                {{# messages }}
                <li> {{ author }} - {{ message }} </li>
                {{/ messages }}
            </ul>
        </div>
    </body>
</html>{% endraw %}
```

O que adicionaremos agora ao nosso `Sources/main.swift`:

- Estrutura de dados para ser renderizado no `html`, que ser√° o response do endpoint "/"
- Response com path do arquivo que ser√° usado para renderizar o dicion√°rio que acabamos de adicionar 
- `FileResponder`, que ser√° respons√°vel por expor os arquivos da pasta `public` de forma est√°tica


O resultado final do nosso `main.swift`

```swift
import Zewo
import HTTPFile
import Mustache
import Sideburns

let log = Log()
let logMiddleware = LogMiddleware(log: log)

let router = Router(middleware: logMiddleware) { route in
    route.get("/") { request in
        let data: [String: Any] = [
            "title": "T√≠tulo da P√°gina",
            "description": "Renderizando HTML usando Sideburns",
            "messages": [ 
                [
                    "author": "Patrick", 
                    "message": "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                ],
                [
                    "author": "Senhor Sirigueijo", 
                    "message": "Morbi luctus urna vel lacus malesuada posuere."
                ],
                [
                    "author": "Lula Molusco", 
                    "message": "Praesent dignissim nunc a convallis posuere."
                ],
                [
                    "author": "Bob Esponja", 
                    "message": "Nam facilisis arcu at consequat sagittis."
                ]
            ]
        ]
        return try Response(templatePath: "public/hello.html", templateData: data)
    }
    route.fallback = FileResponder(basePath: "public")
}

try Server(port: 8080, responder: router).start()
```

Ok, terminamos de incrementar o nosso *Hello World* com a renderiza√ß√£o de algumas informa√ß√µes do servidor. Nesse caso, os dados est√£o todos *"mockados"*, mas poderiam vir diretamente de um banco (que √© assunto para um pr√≥ximo artigo üòâ). Agora vamos compilar as nossas mudan√ßas e executar o bin√°rio gerado pelo compilador. Para isso, volte ao *terminal* e execute

```sh
$ swift-build
$ .build/debug/hello-world
```

Abra o browser e digite o endere√ßo `http://127.0.0.1:8080`. Ao carregar a tela, esse deve ser o resultado

![]({{ site.baseurl }}/img/tholanda/beautiful-rendering-browser.png)

e o `html` ser√° parecido com que est√° listado abaixo

```html
<html>
    <head>
        <title>T√≠tulo da P√°gina</title>
        <meta charset="UTF-8">
        <link rel="stylesheet" type="text/css" href="/assets/main.css">
    </head>
    <body>
        <div>
            <h1>
            Renderizando HTML usando Sideburns
            </h1>
            <ul>
                <li> Patrick - Lorem ipsum dolor sit amet, consectetur adipiscing elit. </li>
                <li> Senhor Sirigueijo - Morbi luctus urna vel lacus malesuada posuere. </li>
                <li> Lula Molusco - Praesent dignissim nunc a convallis posuere. </li>
                <li> Bob Esponja - Nam facilisis arcu at consequat sagittis. </li>
            </ul>
        </div>
    </body>
</html>
```

e por aqui, finalizamos mais um exemplo de como podemos renderizar valores em um `html`. 

<br>

### Criando uma API simples

Agora, vamos usar um reposit√≥rio que j√° tem como depend√™ncia diversos outros que precisamos para *web applications* - o [Zewo](https://github.com/Zewo/Zewo){:target="_blank"} - um reposit√≥rio que podemos chamar de *umbrella package*, fazendo uma refer√™ncia a [umbrella header](https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPFrameworks/Tasks/IncludingFrameworks.html){:target="_blank"}.

> Por conta de diversas libraries ainda estarem sendo escritas, principalmente no caso de rotas RESTful, nesse artigo veremos apenas as rotas de consulta mais simples. Em breve escreverei outro post abordando APIs mais complexas, prometo üòâüôè!

Nesse exemplo criaremos uma API ridiculamente simples. O objetivo n√£o √© ser complexo e por isso n√£o faria sentido criar muitos m√©todos. 

Ent√£o vamos come√ßar criando um novo pacote para a nossa API ? De volta ao *terminal* crie uma nova pasta com o nome `todo-api`

```sh
$ cd ~/
$ mkdir todo-api
$ cd todo-api
$ swift-build --init
Creating Package.swift
Creating .gitignore
Creating Sources/
Creating Sources/main.swift
Creating Tests/
```

vamos editar o arquivo `Package.swift` e adicionar a √∫nica depend√™ncia que precisaremos, o [Zewo](https://github.com/Zewo/Zewo){:target="_blank"}

> Se voc√™ quiser conhecer quais s√£o as depend√™ncias usadas por esse reposit√≥rio, acesse essa url: [https://github.com/Zewo/Zewo/blob/master/Package.swift](https://github.com/Zewo/Zewo/blob/master/Package.swift){:target="_blank"}

```swift
import PackageDescription

let package = Package(
    name: "todo-api",
    dependencies: [
        .Package(url: "https://github.com/Zewo/Zewo", majorVersion: 0, minor: 3)
    ]
)
```

agora n√≥s precisamos criar de fato as nossas rotas e respostas, sendo assim, edite o arquivo `Sources/main.swift` e cole o conte√∫do do bloco abaixo

```swift
import HTTPServer
import Router
import LogMiddleware
import HTTPFile
import ContentNegotiationMiddleware
import LogMiddleware
import JSONMediaType
import InterchangeData

let log                 = Log()
let logMiddleware       = LogMiddleware(log: log)
let contentNegotiaton   = ContentNegotiationMiddleware(mediaTypes: JSONMediaType())

let router = Router(middleware: logMiddleware, contentNegotiaton) { route in
    
    var items: [InterchangeData] = [
        ["id": "1", "description": "Comprar frutas"],
        ["id": "5", "description": "Pagar condom√≠nio"],
        ["id": "3", "description": "Despachar encomenda"],
        ["id": "6", "description": "Assistir Deadpool"],
        ["id": "4", "description": "Ir ao banco"],
        ["id": "2", "description": "Ligar para operadora"]
    ]
    
    func get(id: String) throws -> InterchangeData {
        let list = items.filter({ $0["id"]!.string == id })

        guard let todo = list.first else {
            return nil
        }
        
        return todo
    }
    
    // cria o novo registro de uma tarefa
    route.post("/todo") { request in
        let body        = request.content!
        
        let id          = InterchangeData.from(String(arc4random()))
        let description = body["description"]
        
        let todo: InterchangeData = [
            "id"          : id,
            "description" : description!
        ]
        
        items.append(todo)
        
        return Response(status: .Created, content: todo)
    }
    
    // Lista todas os registros de tarefas
    route.get("/todo") { request in
        items = items.sort({ $0["id"]!.string < $1["id"]!.string })
        
        guard items.count > 0 else {
            return Response(status: .NoContent)
        }
        
        return Response(content: InterchangeData.from(items))
    }
    
    // busca os dados de uma tarefa baseado no id
    route.get("/todo/:id") { request in
        let path = request.pathParameters
        
        let todo = try get(path["id"]!)
        guard todo != nil else {
            return Response(status: .NotFound)
        }
        
        return Response(content: todo)
    }
    
    // atualiza uma tarefa baseado no id
    route.put("/todo/:id") { request in
        let path = request.pathParameters
        let body = request.content!
        
        var todo = try get(path["id"]!)
        guard todo != nil else {
            return Response(status: .NotFound)
        }
        
        let index = items.indexOf(todo)!
        todo["description"] = body["description"]
        items[index] = todo
        
        return Response(status: .NoContent)
    }
    
    // exclui uma tarefa baseado no id
    route.delete("/todo/:id") { request in
        let path = request.pathParameters
        
        let todo = try get(path["id"]!)
        guard todo != nil else {
            return Response(status: .NotFound)
        }
        
        let index = items.indexOf(todo)!
        guard items.removeAtIndex(index) != nil else {
            return Response(status: .NotFound)
        }
        
        return Response(status: .NoContent)
    }
}

try Server(port: 8080, responder: router).start()
```

√â claro que voc√™, um expert em Swift, pode criticar diversos pontos do bloco acima, infelizmente ainda n√£o fa√ßo parte desse ~~seleto~~ time, mas estamos √† caminho.

Neste exemplo, criamos:

- Cria√ß√£o de uma tarefa
- Listagem das tarefas
- Detalhe de uma tarefa
- Atualiza√ß√£o de uma tarefa
- Exclus√£o de uma tarefa

Em princ√≠pio, para que n√£o ficasse com mais depend√™ncias (ex: banco de dados), usamos um array mut√°vel para persistir e listar as tarefas. √â claro que essa n√£o chega nem a ser uma forma decente de persist√™ncia, mas atende ao nosso prop√≥sito educativo. 


> **ContentNegotiationMiddleware**
> 
> Esse middleware tem como fun√ß√£o b√°sica o tratamento do tipo de informa√ß√£o recebida no request. √â baseado no `Content-Type` e no `Accept`. No nosso exemplo, trabalharemos apenas com `JSON`. Caso haja necessidade, voc√™ pode optar por usar o [URLEncodedForm](https://github.com/Zewo/URLEncodedForm){:target="_blank"}.

Depois de rodar o exemplo anterior, voc√™ pode estar perguntando: *como proteger a nossa humilde API ?* Bom, temos √† disposi√ß√£o diversas ferramentas para nos auxiliar nesse ponto, mas por enquanto, apenas um est√° implementado de forma nativa no [Zewo](https://github.com/Zewo){:target="_blank"}: o [BasicAuthMiddleware](https://github.com/Zewo/BasicAuthMiddleware){:target="_blank"} [(RFC 2617)](https://tools.ietf.org/html/rfc2617){:target="_blank"}.

Infelizmente, o [HTTP Basic Authentication](https://tools.ietf.org/html/rfc2617){:target="_blank"} n√£o √© seguro em rela√ß√£o ao dado trafegado. Encriptar os dados requer *[Base64](https://en.wikipedia.org/wiki/Base64){:target="_blank"}*, uma encripta√ß√£o de duas vias, ou seja, a seguran√ßa √© t√£o fraca que, qualquer pessoa que interceptar a sua conex√£o com o servidor, facilmente descobrir√° qual usu√°rio e senha est√° sendo transmitido. Se voc√™ usa *HTTPS*, a vida de quem est√° tentando interceptar os dados trafegados complica um pouco mais.

<br>

### Como adicionar o BasicAuth nas minhas rotas ?

Em outras ocasi√µes, voc√™ precisaria adicionar o pacote *[BasicAuthMiddleware](https://github.com/Zewo/BasicAuthMiddleware){:target="_blank"}* na lista de depend√™ncias do `Package.swift`, mas n√≥s estamos usando o [Zewo](https://github.com/Zewo/Zewo){:target="_blank"}, que √© o nosso *umbrella package* e ele j√° possui essa depend√™ncia. Ent√£o, ao inv√©s de trabalhar com diversas depend√™ncias, n√≥s vamos voltar a editar o `Sources/main.swift`. 

Importe o `BasicAuthMiddleware` no topo do `main.swift`

```swift
import BasicAuthMiddleware
```

vamos instanciar o `BasicAuthMiddleware`

```swift
let basicAuth = BasicAuthMiddleware { username, password in
    if username == "admin" && password == "password" {
        return .Authenticated
    }

    return .AccessDenied
}
```

e configurar no nosso `Router`. Basta adicionar a vari√°vel `basicAuth` ao par√¢metro `middleware` e deve ficar assim

```swift
let router = Router(middleware: logMiddleware, contentNegotiaton, basicAuth) { route in 
```

O que precis√°vamos para "segurar" a nossa API era basicamente esses dois passos. O resultado disso √© simples: se voc√™ n√£o informar as credenciais no momento da requisi√ß√£o, a API recusar√° o seu acesso.

![]({{ site.baseurl }}/img/tholanda/api-secured-without-credentials.png)

Ao informar credenciais v√°lidas, a API devolver√° os dados normalmente √© efetuar√° as devidas a√ß√µes, como: insert, update, delete e quantos mais voc√™ configurar

![]({{ site.baseurl }}/img/tholanda/api-secured-with-credentials.png)

e finalmente, terminamos por aqui o terceiro e √∫ltimo exemplo do nosso artigo.

<br>

### Considera√ß√µes finais

Como voc√™ pode ver, o desenvolvimento de *web applications* n√£o √© realmente um monstro de sete cabe√ßas como talvez voc√™ estivesse imaginando. √â claro que no desenvolvimento de software tudo pode piorar, e pode apostar que vai. Com um pouco de estudo, dedica√ß√£o, fonte de pesquisa (t√° bom, Stack Overflow vale tamb√©m üòõ) e uma boa documenta√ß√£o, voc√™ pode e DEVE ir longe. 

Durante o tempo em que estive escrevendo esse post, a *Apple* liberou mais um *toolchain* com diversas novas possibilidades que, com toda certeza, nos ajudar√£o muito daqui pra frente. Pelo fato de agora o [Swift](https://www.swift.org){:target="_blank"} tamb√©m compilar *[C](https://en.wikipedia.org/wiki/C_(programming_language)){:target="_blank"}*, podemos fazer deploy das aplica√ß√µes escritas em [Swift](https://www.swift.org){:target="_blank"} para o [Heroku](https://www.heroku.com){:target="_blank"}, mas isso tamb√©m ficar√° para uma pr√≥xima vez.

Os c√≥digos dos exemplos est√£o todos no meu perfil do Github, na url [https://github.com/unnamedd/equinocios-backend](https://github.com/unnamedd/equinocios-backend){:target="_blank"}

Hoje, dia 20 de Mar√ßo, seria o nosso √∫ltimo dia de [EquinociOS](http://equinocios.com){:target="_blank"}, mas devido a tantos √≥timos desenvolvedores se interessarem pelo projeto, foi decidido que prorrogar√≠amos at√© o final do m√™s. Isso quer dizer que at√© o dia 31 de Mar√ßo, voc√™ vai poder acompanhar artigos in√©ditos sobre o mundo de desenvolvimento da *Apple*.

<br><br>

Esse post teve a participa√ß√£o direta de diversos amigos, sugerindo, corrigindo ou ensinando.

Meus agradecimentos ao *[Paulo Faria](https://twitter.com/paulofaria){:target="_blank"}*, ao *[Ricardo Borelli](https://twitter.com/rabc){:target="_blank"}* e a minha amada Carolina.

> A foto de capa √© da Via L√°ctea numa bel√≠ssima noite! 
