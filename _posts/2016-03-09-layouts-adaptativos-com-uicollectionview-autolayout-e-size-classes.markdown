---
layout:     post
title:      "Layouts adaptativos com UICollectionView, Size Classes e Auto Layout"
date:       2016-03-09 00:00:00
author:     "Rodrigo Borges"
header-img: "img/borges/viva-cover.jpg"
category:   iOS
---

> Meu nome √© Rodrigo Borges ([@rdgborges](https://www.twitter.com/rdgborges)). Sou manaura e moro em S√£o Paulo. Passei uma temporada em BH, onde fiz um mestrado em Computa√ß√£o Ub√≠qua. J√° trabalhei com Maemo, MeeGo, Symbian, Windows Phone e Android. Atualmente sou desenvolvedor iOS no [VivaReal](https://itunes.apple.com/br/app/vivareal-imoveis-casas-condominios/id655245656?mt=8) e desenvolvedor/co-fundador no [Meatless](https://itunes.apple.com/us/app/meatless-sao-paulo-sp/id1080837095?l=pt&ls=1&mt=8), onde estou tentando reduzir o consumo de carne no mundo  com alguns amigos.

Quando entrei no VivaReal, um dos meus primeiros desafios foi desenvolver a nova p√°gina de detalhes do im√≥vel (PDP, do ingl√™s, Property Details Page). Para isso, eu precisei utilizar UICollectionView, Auto Layout, Size Classes, capturar eventos de mudan√ßa de tamanho da tela, criar um layout espec√≠fico para o iPad e suportar Multitasking. Um pequeno detalhe: eu nunca tinha trabalhado com nada disso. ü§ìüëç

O objetivo desse artigo √© mostrar que com um esfor√ßo relativamente pequeno, voc√™ consegue aproveitar ao m√°ximo o tamanho da tela do device do seu usu√°rio (seja qual iDevice for) para criar uma interface bonita e adaptativa.

##Property Details Page

No [app do VivaReal](https://itunes.apple.com/br/app/vivareal-imoveis-casas-condominios/id655245656?mt=8), a PDP √© um View Controller que mostra detalhes de um im√≥vel selecionado pelo usu√°rio. Ela √© composta por v√°rias se√ß√µes com informa√ß√µes como pre√ßos do aluguel e condom√≠nio, localiza√ß√£o, descri√ß√£o, formul√°rio para contato e outros detalhes.

<center><b>PDP no iPad</b></center>
![]({{ site.baseurl }}/img/borges/viva-ipad1.png)

<center><b>PDP no iPhone</b></center>
<center><img src="/img/borges/viva-iphone1.png" alt="" /></center>

Toda Collection View possui um objeto do tipo **UICollectionViewLayout**, que √© o respons√°vel por definir o tamanho, posi√ß√£o e outros atributos das c√©lulas e se√ß√µes. A PDP antiga utilizava o layout padr√£o para Collection Views disponibilizado no UIKit, o **UICollectionViewFlowLayout**.

> Apesar de ser customiz√°vel em v√°rios aspectos, um dos principais problemas desse layout √© n√£o poder posicionar as c√©lulas de outra forma que n√£o seja um grid, isto √©, baseado em linhas e colunas.¬†

Outro problema que identifiquei foi o tamanho das c√©lulas em uma mesma linha. Geralmente, a altura de uma linha √© determinada pela c√©lula de maior altura. Dessa forma, na PDP antiga, haviam v√°rios espa√ßos em branco entre c√©lulas de linhas diferentes, pois as c√©lulas costumam variar bastante de tamanho.

##Custom Layouts

Para resolver esse problema, chegamos a uma alternativa: **Custom Layouts**. Segundo a [Apple](https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/CollectionViewPGforIOS/CreatingCustomLayouts/CreatingCustomLayouts.html), Custom Layouts devem ser considerados se:

1. O layout n√£o se parece com um grid, um layout baseado em linhas ou suporta scroll em mais de uma dire√ß√£o;
2. Voc√™ precisa mudar a posi√ß√£o das c√©lulas constantemente.

No nosso caso, percebemos que satisfaz√≠amos ambos os pontos.¬†

- Primeiro, o nosso layout para uma tela maior, como a do iPad, n√£o tem o conceito de linhas, apesar de ter o de colunas. As c√©lulas deveriam ser posicionadas nas colunas logo abaixo das √∫ltimas c√©lulas adicionadas, sem se importar com o tamanho destas.

- Segundo, de acordo com o tamanho da tela, as c√©lulas da nossa PDP devem ter posi√ß√µes diferentes para facilitar a visualiza√ß√£o das informa√ß√µes. Por exemplo, no iPad em *portrait*, a c√©lula de localiza√ß√£o deve vir logo ap√≥s a c√©lula de resumo de pre√ßo e caracter√≠sticas. J√° em *landscape*, a c√©lula de descri√ß√£o do im√≥vel √© que vem logo abaixo da c√©lula de resumo.

Todos esses pontos nos levaram a utilizar um Custom Layout para implementar nossa nova PDP. üëå

###Criando a subclasse da UICollectionViewLayout

A primeira coisa a se fazer quando implementando um Custom Layout √© criar uma **subclasse** da UICollectionViewLayout. Ela deve implementar 3 m√©todos principais, que s√£o os respons√°veis por indicar √† Collection View os tamanhos e posi√ß√µes das c√©lulas.

- prepareLayout
- collectionViewContentSize
- layoutAttributesForElementsInRect:

O m√©todo prepareLayout possui a implementa√ß√£o mais complexa dos 3, pois ele varia de acordo com a complexidade do layout da sua Collection View. Os outros 2 m√©todos apenas retornam objetos que calculamos no prepareLayout, como veremos mais a frente.

###M√©todo prepareLayout

No m√©todo prepareLayout, deve-se determinar a posi√ß√£o de cada c√©lula. No fim desse m√©todo, √© preciso ter o m√≠nimo de informa√ß√£o para definir a √°rea total do conte√∫do da Collection View (n√£o somente a √°rea vis√≠vel).

Criamos algumas vari√°veis globais do layout para nos auxiliar e evitar recalcular o layout a cada pequena intera√ß√£o do usu√°rio com a Collection View:

- **attributesCache**: Array que armazena os atributos do layout de cada c√©lula;
- **contentWidth** e **contentHeight**: Armazenam a largura e altura do conte√∫do da Collection View. S√£o atualizados sempre que a posi√ß√£o de uma c√©lula √© determinada.

~~~swift
override func prepareLayout() {

    let numberOfColumns = columnsBasedOnScreen()
    attributesCache = []
    contentHeight = 0.0

    // 1    
    // Initializes offsets arrays
    let columnWidth = contentWidth / CGFloat(numberOfColumns)
    var yOffset = [CGFloat](count: numberOfColumns, repeatedValue: 0)

    var xOffset = [CGFloat]()
    for column in 0 ..< numberOfColumns {
        xOffset.append(CGFloat(column) * columnWidth)
    }

    var column = 0

    for item in 0 ..< collectionView!.numberOfItemsInSection(0) {
        // 2    
        // Calculates cell frame
        let indexPath = NSIndexPath(forItem: item, inSection: 0)
        let itemHeight = delegate.heightForItemAtIndexPath(indexPath, withWidth: columnWidth)

        var frame: CGRect
        // 3
        if item == 0 {
            // if first cell, cell width == content width
            frame = CGRect(x: xOffset[column], y: yOffset[column], width: contentWidth, height: itemHeight)
        } else {
            // cell width == column width
            frame = CGRect(x: xOffset[column], y: yOffset[column], width: columnWidth, height: itemHeight)
        }

        // 4    
        // Append cell attributes to cache
        let attributes = UICollectionViewLayoutAttributes(forCellWithIndexPath: indexPath)
        attributes.frame = frame
        attributesCache.append(attributes)

        // 5    
        // Updates contentHeight
        contentHeight = max(contentHeight, CGRectGetMaxY(frame))

        // 6
        // Updates y position of next cell
        if item == 0 {
            for i in 0..<yOffset.count {
                yOffset[i] = itemHeight
            }
        } else {
            yOffset[column] = yOffset[column] + itemHeight
        }

        // 7
        // Determines column where next cell will be placed
        if item == 0 {
            column = 0
        } else {
            column = column >= (numberOfColumns - 1) ? 0 : ++column
        }

    }
}
~~~


1. Inicializa√ß√£o dos Arrays xOffset e yOffset. A partir desses Arrays, calculamos a posi√ß√£o de cada c√©lula na Collection View. Eles s√£o atualizados cada vez que a posi√ß√£o de uma c√©lula √© calculada para sabermos onde posicionar a pr√≥xima c√©lula da lista;
2. C√°lculo do frame da c√©lula baseado na largura da coluna e na sua altura;
3. Caso o item seja o primeiro (c√©lula das fotos), a largura √© igual a largura da Collection View. Caso contr√°rio, √© igual a largura da coluna;
4. Ap√≥s o frame da c√©lula ser definido, o objeto de atributos da c√©lula √© adicionado ao cache. Este ser√° utilizado posteriormente no m√©todo layoutAttributesForElementsInRect:;
5. Atualiza-se a altura da √°rea de conte√∫do da Collection View, o qual ser√° utilizada no m√©todo collectionViewContentSize;
6. Atualiza a posi√ß√£o em que a pr√≥xima c√©lula da coluna ser√° posicionada, de acordo com a altura e posi√ß√£o da c√©lula atual.
7. Determina a coluna onde a pr√≥xima c√©lula ser√° colocada;

Para definir o posicionamento das c√©lulas, decidimos criar um m√©todo que analisa a **orienta√ß√£o** do device e **Size Class** da tela e retorna o n√∫mero de colunas em que o layout ser√° dividido.

~~~swift
func columnsBasedOnScreen() -> Int {
    let orientation = UIApplication.sharedApplication().statusBarOrientation
    if orientation == UIInterfaceOrientation.Portrait || orientation == UIInterfaceOrientation.PortraitUpsideDown {
        // portrait
        return 1

    } else {
        // landscape
        let horizontalSizeClass = self.collectionView?.traitCollection.horizontalSizeClass
        let verticalSizeClass = self.collectionView?.traitCollection.verticalSizeClass

        if horizontalSizeClass == UIUserInterfaceSizeClass.Regular && verticalSizeClass == UIUserInterfaceSizeClass.Regular {
            let applicationDelegate = UIApplication.sharedApplication().delegate

            guard let delegate = applicationDelegate else {
                return 1
            }

            guard let window = delegate.window else {
                return 1
            }

            let isFullscreen = CGRectEqualToRect(window!.frame, window!.screen.bounds)

            if isFullscreen {
                return 2
            } else {
                return 1
            }
        } else {
            return 1
        }

    }
}
~~~

- Caso o device esteja em portrait, o layout da Collection View sempre ser√° baseado em 1 coluna.
- Caso esteja em landscape, as Size Classes horizontais e verticais s√£o verificadas:
    - Se s√£o ambas Regular, significa que estamos em uma tela grande, como o iPad. Nesse caso, precisamos checar tamb√©m se o usu√°rio est√° utilizando Multitasking ou n√£o. Isso √© feito facilmente comparando o window.frame com o window.screen.bounds.
    - Caso contr√°rio, estamos em uma tela menor, e, por isso, utilizamos o layout normal baseado em 1 coluna.

###M√©todo collectionViewContentSize

Com as informa√ß√µes calculadas no m√©todo prepareLayout, √© poss√≠vel definir a √°rea total do conte√∫do da Collection View. O retorno do m√©todo √© um objeto do tipo CGSize.

~~~swift
override func collectionViewContentSize() -> CGSize {
    return CGSize(width: contentWidth, height: contentHeight)
}
~~~

No nosso caso, √† medida que calculamos as posi√ß√µes e tamanhos das c√©lulas no m√©todo **prepareLayout**, atualizamos duas vari√°veis globais da classe: **contentWidth** e **contentHeight**. Dentro do m√©todo collectionViewContentSize() criamos uma CGSize e a retornamos.

###M√©todo layoutAttributesForElementsInRect:

Esse m√©todo √© chamado pela Collection View para saber os atributos das c√©lulas que est√£o dentro de um ret√¢ngulo passado como par√¢metro. O retorno do m√©todo deve ser um **Array de UICollectionViewLayoutAttributes**.

~~~swift
override func layoutAttributesForElementsInRect(rect: CGRect) -> [UICollectionViewLayoutAttributes]? {
    var layoutAttributes = [UICollectionViewLayoutAttributes]()

    for attributes in attributesCache {
        if CGRectIntersectsRect(attributes.frame, rect){
            layoutAttributes.append(attributes)
        }
    }
    return layoutAttributes
}
~~~

Os atributos de cada c√©lula s√£o informa√ß√µes que tamb√©m podemos calcular e armazenar durante a execu√ß√£o do m√©todo **prepareLayout**. Neste m√©todo, criamos um Array de UICollectionViewLayoutAttributes e, √† medida que definimos as posi√ß√µes das c√©lulas, vamos adicionando seus atributos no Array.

Feito isso, no layoutAttributesForElementsInRect:, basta iterarmos sobre o Array de atributos e utilizar o m√©todo CGRectIntersectsRect para identificar quais c√©lulas cujos frames intersectam o ret√¢ngulo passado como par√¢metro.

###Definindo o novo layout da Collection View

Uma vez que temos o nosso Custom Layout implementado, precisamos set√°-lo como layout da nossa Collection View. Para isso, bastamos selecion√°-la no Storyboard, abrir o Attributes Inspector, selecionar o tipo do layout como **Custom** e a classe do layout.

![]({{ site.baseurl }}/img/borges/viva-storyboard5.png)


###Atualizando o layout ap√≥s a transi√ß√£o de tamanho de tela

Precisamos avisar a collection View para recalcular a posi√ß√£o das c√©lulas e √°rea do conte√∫do toda vez que houver uma mudan√ßa de tamanho ou orienta√ß√£o da tela.

Para isso, basta-se fazer um override do m√©todo **viewWillTransitionToSize** da nossa View Controller e chamar o m√©todo **invalidateLayout** no layout da nossa Collection View. Assim, o m√©todo **prepareLayout** ser√° chamado novamente, atualizando todas as informa√ß√µes de layout e posicionamento das c√©lulas.

~~~swift
override func viewWillTransitionToSize(size: CGSize, withTransitionCoordinator coordinator: UIViewControllerTransitionCoordinator) {
    super.viewWillTransitionToSize(size, withTransitionCoordinator: coordinator)

    self.collectionView.collectionViewLayout.invalidateLayout()
    self.collectionView.reloadData()
}
~~~

##Mostrando Views de acordo com a Size Class

Outra caracter√≠stica interessante da PDP √© que, em telas menores, o formul√°rio de contato com o anunciante deve ser implementado como √∫ltima c√©lula da Collection View. J√° em telas maiores (iPad), ele deve ficar fixo no lado direito do layout, independente da Collection View.

![]({{ site.baseurl }}/img/borges/viva-ipad4.png)

###Size Classes

Desde a cria√ß√£o das [Size Classes](https://developer.apple.com/library/ios/recipes/xcode_help-IB_adaptive_sizes/chapters/AboutAdaptiveSizeDesign.html), o desenvolvimento de interfaces universais no iOS deixou de ser dividido em iPhone e iPad para levar em considera√ß√£o duas classes: **Regular** e **Compact** combinadas com as duas dimens√µes: **Width** e **Height**.

Cada combina√ß√£o poss√≠vel entre elas define um tipo de tamanho de tela, levando em conta tamb√©m a orienta√ß√£o do device. Por exemplo, **Compact Height** define a tela dos iPhones em landscape. J√° **Regular Width/Regular Height** define a tela dos iPads, seja em portrait ou landscape.

Quando voc√™ baseia o layout em Size Classes, a interface do seu app pode se comportar bem em qualquer tipo de tela, seja ela de um iPhone, iPhone Plus, de um iPad ou iPad Pro, em portrait ou landscape.

###Modificando constraints para uma Size Class

No Storyboard √© poss√≠vel alterar a Size Class do layout na barra que fica logo acima da Debug area.¬†Inicialmente, a Size Class selecionada √© a Any Width/Any Height, o que significa que as constraints e Views configuradas no atual Storyboard ser√£o aplicadas a todas as Size Classes.

<center><img src="/img/borges/viva-storyboard4.png" alt="" /></center>

Quando mudamos para uma outra Size Class, podemos configurar como nossa interface se comportar√° neste tamanho espec√≠fico da tela, sem modificar o seu comportamento no restante das classes.

No nosso caso, queremos que a View de formul√°rio de contato apare√ßa apenas quando o usu√°rio estiver em um tamanho de tela grande como o do iPad. Logo, selecionamos Regular Width/Regular Height como nossa Size Class e modificamos a interface para tornar o formul√°rio vis√≠vel.

A modifica√ß√£o foi alterar as **constraints do Auto Layout** que definem o espa√ßo √† direita da Collection View e a largura do formul√°rio. Assim, no iPad, a Collection View acompanhar√° a largura do formul√°rio, se mantendo √† esquerda dele, enquanto que, nos outros tamanhos de tela, ela ocupar√° toda a extens√£o do View Controller.

| Any Width, Any Height  | Regular Width, Regular Height |
------------- | -------------
| ![]({{ site.baseurl }}/img/borges/viva-storyboard2.png) | ![]({{ site.baseurl }}/img/borges/viva-storyboard1.png)|

###Instalando uma View de acordo com a Size Class

Voc√™ deve estar se perguntando: O que acontece com a nossa View lateral de formul√°rio no iPhone? ü§î Ela √© criada e ocupa mem√≥ria mesmo nunca sendo utilizada l√°? üò±

Felizmente o Xcode fornece um meio de configurar se uma View ser√° computada ou n√£o de acordo com a Size Class. Para isso, precisamos apenas selecionar a View em quest√£o no Storyboard, selecionar o Attributes Inspector e, l√° no final, adicionar as Size Classes em que a View ser√° "instalada". Dessa forma, a View far√° parte da hierarquia de Views do layout apenas nas Size Classes em que aparece, sem gastar recursos do sistema nas outras.

<center><img src="/img/borges/viva-storyboard3.png" alt="" /></center>

O formul√°rio √© instalado apenas quando em Regular Width/Regular Height. J√° o bot√£o de "Contatar anunciante", que aparece na parte inferior da tela, √© instalado em todas as Size Classes, exceto nas Regular.

##Multitasking

Quando voc√™ desenvolve sua app baseando-se em Size Classes e Auto Layout, ela se adaptar√° automaticamente durante o uso de Multitasking! üéâ

No fim das contas, durante as mudan√ßas de tamanho no Multitasking, a app estar√° apenas trocando de Size Class. Como sua Collection View est√° escutando as mudan√ßas de Size Class, recalculando seu layout e suas Views est√£o sendo instaladas conforme a Size Class, n√£o precisa fazer mais nada para adaptar seu layout.   

![]({{ site.baseurl }}/img/borges/viva-ipad3.png)

![]({{ site.baseurl }}/img/borges/viva-ipad2.png)

Segundo a [Apple](https://developer.apple.com/library/prerelease/ios/documentation/WindowsViews/Conceptual/AdoptingMultitaskingOniPad/index.html):

> From a development perspective, the biggest change is about resource management.

Ent√£o o maior problema a ser tratado durante o Multitasking √© o gerenciamento de recursos e mem√≥ria. Conceitos como instala√ß√£o ou n√£o de Views baseados em Size Classes ajudam a utilizar o m√≠nimo de recursos poss√≠veis e compartilh√°-los com outras apps.

##Conclus√£o

Vimos aqui como foi implementada a PDP do app do VivaReal, onde o desafio foi criar a melhor experi√™ncia pro usu√°rio que o tamanho de tela do seu device permitisse.

Utilizamos UICollectionViews e Custom Layouts para definir a l√≥gica de cria√ß√£o do nosso layout, nos baseando nas Size Classes para saber como posicionar as c√©lulas e quais Views aparecem ou n√£o em cada tamanho de tela.

N√£o deixe de ler e compartilhar tamb√©m os outros artigos do EquinociOS, uma excelente iniciativa da comunidade do [CocoaHeads Brasil](http://www.cocoaheads.com.br)! üëèü§ì

##Refer√™ncias
1. [Projeto Demo](https://github.com/rdgborges/VivaRealPDPExample). Disponibilizado no meu perfil do Github.
2. [UICollectionViews Tutorial](http://www.raywenderlich.com/78550/beginning-ios-collection-views-swift-part-1). Ray Wenderlich.
3. [UICollectionView Custom Layout Tutorial](http://www.raywenderlich.com/107439/uicollectionview-custom-layout-tutorial-pinterest). Ray Wenderlich.
4. [Creating Custom Layouts](https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/CollectionViewPGforIOS/CreatingCustomLayouts/CreatingCustomLayouts.html). Apple iOS Developer Library.
5. [About Designing for Multiple Size Classes](https://developer.apple.com/library/ios/recipes/xcode_help-IB_adaptive_sizes/chapters/AboutAdaptiveSizeDesign.html). Apple iOS Developer Library.
6. [Installing and Uninstalling Views for a Size Class](https://developer.apple.com/library/ios/recipes/xcode_help-IB_adaptive_sizes/chapters/EnableAndDisableViews.html). Apple iOS Developer Library.
7. [Adopting Multitasking Enhancements on iPad](https://developer.apple.com/library/prerelease/ios/documentation/WindowsViews/Conceptual/AdoptingMultitaskingOniPad/index.html). Apple iOS Developer Library.
